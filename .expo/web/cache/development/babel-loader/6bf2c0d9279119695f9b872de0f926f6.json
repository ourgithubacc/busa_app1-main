{"ast":null,"code":"import invariant from 'invariant';\nimport { Commands } from \"../View/ViewNativeComponent\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nexport default function useAndroidRippleForView(rippleConfig, viewRef) {\n  var _ref = rippleConfig != null ? rippleConfig : {},\n    color = _ref.color,\n    borderless = _ref.borderless,\n    radius = _ref.radius,\n    foreground = _ref.foreground;\n  return useMemo(function () {\n    if (Platform.OS === 'android' && Platform.Version >= 21 && (color != null || borderless != null || radius != null)) {\n      var processedColor = processColor(color);\n      invariant(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');\n      var nativeRippleValue = {\n        type: 'RippleAndroid',\n        color: processedColor,\n        borderless: borderless === true,\n        rippleRadius: radius\n      };\n      return {\n        viewProps: foreground === true ? {\n          nativeForegroundAndroid: nativeRippleValue\n        } : {\n          nativeBackgroundAndroid: nativeRippleValue\n        },\n        onPressIn: function onPressIn(event) {\n          var view = viewRef.current;\n          if (view != null) {\n            var _event$nativeEvent$lo, _event$nativeEvent$lo2;\n            Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);\n            Commands.setPressed(view, true);\n          }\n        },\n        onPressMove: function onPressMove(event) {\n          var view = viewRef.current;\n          if (view != null) {\n            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;\n            Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);\n          }\n        },\n        onPressOut: function onPressOut(event) {\n          var view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        }\n      };\n    }\n    return null;\n  }, [borderless, color, foreground, radius, viewRef]);\n}","map":{"version":3,"names":["invariant","Commands","React","useMemo","useAndroidRippleForView","rippleConfig","viewRef","color","borderless","radius","foreground","Platform","OS","Version","processedColor","processColor","nativeRippleValue","type","rippleRadius","viewProps","nativeForegroundAndroid","nativeBackgroundAndroid","onPressIn","event","view","current","hotspotUpdate","nativeEvent","locationX","locationY","setPressed","onPressMove","onPressOut"],"sources":["C:/Users/STEPHEN/Desktop/busa_app1-main/node_modules/react-native/Libraries/Components/Pressable/useAndroidRippleForView.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from 'invariant';\nimport {Commands} from '../View/ViewNativeComponent';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\nimport {Platform, View, processColor} from 'react-native';\nimport * as React from 'react';\nimport {useMemo} from 'react';\n\ntype NativeBackgroundProp = $ReadOnly<{|\n  type: 'RippleAndroid',\n  color: ?number,\n  borderless: boolean,\n  rippleRadius: ?number,\n|}>;\n\nexport type RippleConfig = {|\n  color?: ColorValue,\n  borderless?: boolean,\n  radius?: number,\n  foreground?: boolean,\n|};\n\n/**\n * Provides the event handlers and props for configuring the ripple effect on\n * supported versions of Android.\n */\nexport default function useAndroidRippleForView(\n  rippleConfig: ?RippleConfig,\n  viewRef: {|current: null | React.ElementRef<typeof View>|},\n): ?$ReadOnly<{|\n  onPressIn: (event: PressEvent) => void,\n  onPressMove: (event: PressEvent) => void,\n  onPressOut: (event: PressEvent) => void,\n  viewProps:\n    | $ReadOnly<{|nativeBackgroundAndroid: NativeBackgroundProp|}>\n    | $ReadOnly<{|nativeForegroundAndroid: NativeBackgroundProp|}>,\n|}> {\n  const {color, borderless, radius, foreground} = rippleConfig ?? {};\n\n  return useMemo(() => {\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= 21 &&\n      (color != null || borderless != null || radius != null)\n    ) {\n      const processedColor = processColor(color);\n      invariant(\n        processedColor == null || typeof processedColor === 'number',\n        'Unexpected color given for Ripple color',\n      );\n\n      const nativeRippleValue = {\n        type: 'RippleAndroid',\n        color: processedColor,\n        borderless: borderless === true,\n        rippleRadius: radius,\n      };\n\n      return {\n        viewProps:\n          foreground === true\n            ? {nativeForegroundAndroid: nativeRippleValue}\n            : {nativeBackgroundAndroid: nativeRippleValue},\n        onPressIn(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n            Commands.setPressed(view, true);\n          }\n        },\n        onPressMove(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressOut(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        },\n      };\n    }\n    return null;\n  }, [borderless, color, foreground, radius, viewRef]);\n}\n"],"mappings":"AAUA,OAAOA,SAAS,MAAM,WAAW;AACjC,SAAQC,QAAQ;AAAqC;AAAA;AAAA;AAIrD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAAQC,OAAO,QAAO,OAAO;AAoB7B,eAAe,SAASC,uBAAuB,CAC7CC,YAA2B,EAC3BC,OAA0D,EAQxD;EACF,WAAgDD,YAAY,WAAZA,YAAY,GAAI,CAAC,CAAC;IAA3DE,KAAK,QAALA,KAAK;IAAEC,UAAU,QAAVA,UAAU;IAAEC,MAAM,QAANA,MAAM;IAAEC,UAAU,QAAVA,UAAU;EAE5C,OAAOP,OAAO,CAAC,YAAM;IACnB,IACEQ,QAAQ,CAACC,EAAE,KAAK,SAAS,IACzBD,QAAQ,CAACE,OAAO,IAAI,EAAE,KACrBN,KAAK,IAAI,IAAI,IAAIC,UAAU,IAAI,IAAI,IAAIC,MAAM,IAAI,IAAI,CAAC,EACvD;MACA,IAAMK,cAAc,GAAGC,YAAY,CAACR,KAAK,CAAC;MAC1CP,SAAS,CACPc,cAAc,IAAI,IAAI,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAC5D,yCAAyC,CAC1C;MAED,IAAME,iBAAiB,GAAG;QACxBC,IAAI,EAAE,eAAe;QACrBV,KAAK,EAAEO,cAAc;QACrBN,UAAU,EAAEA,UAAU,KAAK,IAAI;QAC/BU,YAAY,EAAET;MAChB,CAAC;MAED,OAAO;QACLU,SAAS,EACPT,UAAU,KAAK,IAAI,GACf;UAACU,uBAAuB,EAAEJ;QAAiB,CAAC,GAC5C;UAACK,uBAAuB,EAAEL;QAAiB,CAAC;QAClDM,SAAS,qBAACC,KAAiB,EAAQ;UACjC,IAAMC,IAAI,GAAGlB,OAAO,CAACmB,OAAO;UAC5B,IAAID,IAAI,IAAI,IAAI,EAAE;YAAA;YAChBvB,QAAQ,CAACyB,aAAa,CACpBF,IAAI,2BACJD,KAAK,CAACI,WAAW,CAACC,SAAS,oCAAI,CAAC,4BAChCL,KAAK,CAACI,WAAW,CAACE,SAAS,qCAAI,CAAC,CACjC;YACD5B,QAAQ,CAAC6B,UAAU,CAACN,IAAI,EAAE,IAAI,CAAC;UACjC;QACF,CAAC;QACDO,WAAW,uBAACR,KAAiB,EAAQ;UACnC,IAAMC,IAAI,GAAGlB,OAAO,CAACmB,OAAO;UAC5B,IAAID,IAAI,IAAI,IAAI,EAAE;YAAA;YAChBvB,QAAQ,CAACyB,aAAa,CACpBF,IAAI,4BACJD,KAAK,CAACI,WAAW,CAACC,SAAS,qCAAI,CAAC,4BAChCL,KAAK,CAACI,WAAW,CAACE,SAAS,qCAAI,CAAC,CACjC;UACH;QACF,CAAC;QACDG,UAAU,sBAACT,KAAiB,EAAQ;UAClC,IAAMC,IAAI,GAAGlB,OAAO,CAACmB,OAAO;UAC5B,IAAID,IAAI,IAAI,IAAI,EAAE;YAChBvB,QAAQ,CAAC6B,UAAU,CAACN,IAAI,EAAE,KAAK,CAAC;UAClC;QACF;MACF,CAAC;IACH;IACA,OAAO,IAAI;EACb,CAAC,EAAE,CAAChB,UAAU,EAAED,KAAK,EAAEG,UAAU,EAAED,MAAM,EAAEH,OAAO,CAAC,CAAC;AACtD"},"metadata":{},"sourceType":"module"}