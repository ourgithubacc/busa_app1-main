{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { PermissionStatus, createPermissionHook, UnavailabilityError } from 'expo-modules-core';\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoBarCodeScannerModule from \"./ExpoBarCodeScannerModule\";\nimport ExpoBarCodeScannerView from \"./ExpoBarCodeScannerView\";\nvar BarCodeType = ExpoBarCodeScannerModule.BarCodeType,\n  Type = ExpoBarCodeScannerModule.Type;\nvar EVENT_THROTTLE_MS = 500;\nexport var BarCodeScanner = function (_React$Component) {\n  _inherits(BarCodeScanner, _React$Component);\n  var _super = _createSuper(BarCodeScanner);\n  function BarCodeScanner() {\n    var _this;\n    _classCallCheck(this, BarCodeScanner);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.lastEvents = {};\n    _this.lastEventsTimes = {};\n    _this.onObjectDetected = function (callback) {\n      return function (_ref) {\n        var nativeEvent = _ref.nativeEvent;\n        var type = nativeEvent.type;\n        if (_this.lastEvents[type] && _this.lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this.lastEvents[type] && Date.now() - _this.lastEventsTimes[type] < EVENT_THROTTLE_MS) {\n          return;\n        }\n        if (callback) {\n          callback(nativeEvent);\n          _this.lastEventsTimes[type] = new Date();\n          _this.lastEvents[type] = JSON.stringify(nativeEvent);\n        }\n      };\n    };\n    return _this;\n  }\n  _createClass(BarCodeScanner, [{\n    key: \"render\",\n    value: function render() {\n      var nativeProps = this.convertNativeProps(this.props);\n      var onBarCodeScanned = this.props.onBarCodeScanned;\n      return React.createElement(ExpoBarCodeScannerView, _objectSpread(_objectSpread({}, nativeProps), {}, {\n        onBarCodeScanned: this.onObjectDetected(onBarCodeScanned)\n      }));\n    }\n  }, {\n    key: \"convertNativeProps\",\n    value: function convertNativeProps(props) {\n      var nativeProps = {};\n      for (var _ref2 of Object.entries(props)) {\n        var _ref3 = _slicedToArray(_ref2, 2);\n        var key = _ref3[0];\n        var value = _ref3[1];\n        if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n          nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n        } else {\n          nativeProps[key] = value;\n        }\n      }\n      return nativeProps;\n    }\n  }], [{\n    key: \"getPermissionsAsync\",\n    value: function () {\n      var _getPermissionsAsync = _asyncToGenerator(function* () {\n        return ExpoBarCodeScannerModule.getPermissionsAsync();\n      });\n      function getPermissionsAsync() {\n        return _getPermissionsAsync.apply(this, arguments);\n      }\n      return getPermissionsAsync;\n    }()\n  }, {\n    key: \"requestPermissionsAsync\",\n    value: function () {\n      var _requestPermissionsAsync = _asyncToGenerator(function* () {\n        return ExpoBarCodeScannerModule.requestPermissionsAsync();\n      });\n      function requestPermissionsAsync() {\n        return _requestPermissionsAsync.apply(this, arguments);\n      }\n      return requestPermissionsAsync;\n    }()\n  }, {\n    key: \"scanFromURLAsync\",\n    value: function () {\n      var _scanFromURLAsync = _asyncToGenerator(function* (url) {\n        var barCodeTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.values(BarCodeType);\n        if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n          throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n        }\n        if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n          throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n        }\n        if (Platform.OS === 'ios') {\n          if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n            throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n          }\n          return yield ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n        }\n        return yield ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n      });\n      function scanFromURLAsync(_x) {\n        return _scanFromURLAsync.apply(this, arguments);\n      }\n      return scanFromURLAsync;\n    }()\n  }]);\n  return BarCodeScanner;\n}(React.Component);\nBarCodeScanner.Constants = {\n  BarCodeType: BarCodeType,\n  Type: Type\n};\nBarCodeScanner.ConversionTables = {\n  type: Type\n};\nBarCodeScanner.defaultProps = {\n  type: Type.back,\n  barCodeTypes: Object.values(BarCodeType)\n};\nBarCodeScanner.usePermissions = createPermissionHook({\n  getMethod: BarCodeScanner.getPermissionsAsync,\n  requestMethod: BarCodeScanner.requestPermissionsAsync\n});\nexport { PermissionStatus };\nvar Constants = BarCodeScanner.Constants,\n  getPermissionsAsync = BarCodeScanner.getPermissionsAsync,\n  requestPermissionsAsync = BarCodeScanner.requestPermissionsAsync,\n  scanFromURLAsync = BarCodeScanner.scanFromURLAsync;\nexport { Constants, getPermissionsAsync, requestPermissionsAsync, scanFromURLAsync };","map":{"version":3,"mappings":"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","names":["PermissionStatus","createPermissionHook","UnavailabilityError","React","ExpoBarCodeScannerModule","ExpoBarCodeScannerView","BarCodeType","Type","EVENT_THROTTLE_MS","BarCodeScanner","lastEvents","lastEventsTimes","onObjectDetected","callback","nativeEvent","type","JSON","stringify","Date","now","nativeProps","convertNativeProps","props","onBarCodeScanned","Object","entries","key","value","ConversionTables","getPermissionsAsync","requestPermissionsAsync","url","barCodeTypes","values","scanFromURLAsync","Array","isArray","length","Error","Platform","OS","includes","qr","Component","Constants","defaultProps","back","usePermissions","getMethod","requestMethod"],"sourceRoot":"","sources":["../src/BarCodeScanner.tsx"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform, ViewProps } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\n// @needsAudit\n/**\n * Those coordinates are represented in the coordinate space of the barcode source (e.g. when you\n * are using the barcode scanner view, these values are adjusted to the dimensions of the view).\n */\nexport type BarCodePoint = {\n  /**\n   * The `x` coordinate value.\n   */\n  x: number;\n  /**\n   * The `y` coordinate value.\n   */\n  y: number;\n};\n\n// @needsAudit\nexport type BarCodeSize = {\n  /**\n   * The height value.\n   */\n  height: number;\n  /**\n   * The width value.\n   */\n  width: number;\n};\n\n// @needsAudit\nexport type BarCodeBounds = {\n  /**\n   * The origin point of the bounding box.\n   */\n  origin: BarCodePoint;\n  /**\n   * The size of the bounding box.\n   */\n  size: BarCodeSize;\n};\n\n// @needsAudit\nexport type BarCodeScannerResult = {\n  /**\n   * The barcode type.\n   */\n  type: string;\n  /**\n   * The information encoded in the bar code.\n   */\n  data: string;\n  /**\n   * The [BarCodeBounds](#barcodebounds) object.\n   * `bounds` in some case will be representing an empty rectangle.\n   * Moreover, `bounds` doesn't have to bound the whole barcode.\n   * For some types, they will represent the area used by the scanner.\n   */\n  bounds: BarCodeBounds;\n  /**\n   * Corner points of the bounding box.\n   * `cornerPoints` is not always available and may be empty. On iOS, for `code39` and `pdf417`\n   * you don't get this value.\n   */\n  cornerPoints: BarCodePoint[];\n};\n\n// @docsMissing\nexport type BarCodeEvent = BarCodeScannerResult & {\n  target?: number;\n};\n\n// @docsMissing\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\n// @docsMissing\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\n// @needsAudit\nexport type BarCodeScannerProps = ViewProps & {\n  /**\n   * Camera facing. Use one of `BarCodeScanner.Constants.Type`. Use either `Type.front` or `Type.back`.\n   * Same as `Camera.Constants.Type`.\n   * @default Type.back\n   */\n  type?: 'front' | 'back' | number;\n  /**\n   * An array of bar code types. Usage: `BarCodeScanner.Constants.BarCodeType.<codeType>` where\n   * `codeType` is one of these [listed above](#supported-formats). Defaults to all supported bar\n   * code types. It is recommended to provide only the bar code formats you expect to scan to\n   * minimize battery usage.\n   *\n   * For example: `barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}`.\n   */\n  barCodeTypes?: string[];\n  /**\n   * A callback that is invoked when a bar code has been successfully scanned. The callback is\n   * provided with an [BarCodeScannerResult](#barcodescannerresult).\n   * > __Note:__ Passing `undefined` to the `onBarCodeScanned` prop will result in no scanning. This\n   * > can be used to effectively \"pause\" the scanner so that it doesn't continually scan even after\n   * > data has been retrieved.\n   */\n  onBarCodeScanned?: BarCodeScannedCallback;\n};\n\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing the camera.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for accessing the camera.\n   *\n   * On iOS this will require apps to specify the `NSCameraUsageDescription` entry in the `Info.plist`.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Check or request permissions for the barcode scanner.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = BarCodeScanner.usePermissions();\n   * ```\n   */\n  static usePermissions = createPermissionHook({\n    getMethod: BarCodeScanner.getPermissionsAsync,\n    requestMethod: BarCodeScanner.requestPermissionsAsync,\n  });\n\n  // @needsAudit\n  /**\n   * Scan bar codes from the image given by the URL.\n   * @param url URL to get the image from.\n   * @param barCodeTypes An array of bar code types. Defaults to all supported bar code types on\n   * the platform.\n   * > __Note:__ Only QR codes are supported on iOS.\n   * @return A possibly empty array of objects of the `BarCodeScannerResult` shape, where the type\n   * refers to the bar code type that was scanned and the data is the information encoded in the bar\n   * code.\n   */\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<BarCodeScannerResult[]> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  onObjectDetected =\n    (callback?: BarCodeScannedCallback) =>\n    ({ nativeEvent }: BarCodeEventCallbackArguments) => {\n      const { type } = nativeEvent;\n      if (\n        this.lastEvents[type] &&\n        this.lastEventsTimes[type] &&\n        JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n        Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n      ) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this.lastEventsTimes[type] = new Date();\n        this.lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n\n  /**\n   * @hidden\n   */\n  convertNativeProps(props: BarCodeScannerProps) {\n    const nativeProps: BarCodeScannerProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\nexport const { Constants, getPermissionsAsync, requestPermissionsAsync, scanFromURLAsync } =\n  BarCodeScanner;\n"]},"metadata":{},"sourceType":"module"}