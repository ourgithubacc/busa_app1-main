{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { styles } from \"./styles\";\nvar ic_close = require(\"../../assets/close.png\");\nvar defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false\n};\nvar TextInputComponent = function TextInputComponent(props) {\n  var fontFamily = props.fontFamily,\n    style = props.style,\n    value = props.value,\n    _props$placeholderTex = props.placeholderTextColor,\n    placeholderTextColor = _props$placeholderTex === void 0 ? '#000' : _props$placeholderTex,\n    _props$placeholder = props.placeholder,\n    placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n    showIcon = props.showIcon,\n    inputStyle = props.inputStyle,\n    iconStyle = props.iconStyle,\n    _props$onChangeText = props.onChangeText,\n    onChangeText = _props$onChangeText === void 0 ? function (_value) {} : _props$onChangeText,\n    renderLeftIcon = props.renderLeftIcon,\n    renderRightIcon = props.renderRightIcon;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    text = _useState2[0],\n    setText = _useState2[1];\n  useEffect(function () {\n    if (value) {\n      setText(value);\n    }\n  }, [value]);\n  var onChange = function onChange(text) {\n    setText(text);\n    onChangeText(text);\n  };\n  var _renderRightIcon = function _renderRightIcon() {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n      if (text.length > 0) {\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return onChange('');\n          }\n        }, React.createElement(Image, {\n          source: ic_close,\n          style: StyleSheet.flatten([styles.icon, iconStyle])\n        }));\n      }\n      return null;\n    }\n    return null;\n  };\n  var font = function font() {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily\n      };\n    } else {\n      return {};\n    }\n  };\n  return React.createElement(TouchableWithoutFeedback, null, React.createElement(View, {\n    style: [style]\n  }, React.createElement(View, {\n    style: styles.textInput\n  }, renderLeftIcon === null || renderLeftIcon === void 0 ? void 0 : renderLeftIcon(), React.createElement(TextInput, _extends({}, props, {\n    style: StyleSheet.flatten([styles.input, inputStyle, font()]),\n    value: text,\n    placeholder: placeholder,\n    placeholderTextColor: placeholderTextColor,\n    onChangeText: onChange\n  })), _renderRightIcon())));\n};\nTextInputComponent.defaultProps = defaultProps;\nexport default TextInputComponent;","map":{"version":3,"mappings":"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","names":["React","useEffect","useState","styles","ic_close","require","defaultProps","style","value","showIcon","currency","numeric","TextInputComponent","props","fontFamily","placeholderTextColor","placeholder","inputStyle","iconStyle","onChangeText","_value","renderLeftIcon","renderRightIcon","text","setText","onChange","_renderRightIcon","length","TouchableOpacity","onPress","Image","source","StyleSheet","flatten","icon","font","TouchableWithoutFeedback","View","textInput","TextInput","input"],"sources":["index.tsx"],"sourcesContent":["/* eslint-disable no-shadow */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Image,\n  TextInput,\n  TouchableOpacity,\n  View,\n  TouchableWithoutFeedback,\n  StyleSheet,\n} from 'react-native';\nimport type { CTextInput } from './model';\nimport { styles } from './styles';\n\nconst ic_close = require('../../assets/close.png');\n\nconst defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false,\n};\n\nconst TextInputComponent: CTextInput = (props) => {\n  const {\n    fontFamily,\n    style,\n    value,\n    placeholderTextColor = '#000',\n    placeholder = '',\n    showIcon,\n    inputStyle,\n    iconStyle,\n    onChangeText = (_value: string) => {},\n    renderLeftIcon,\n    renderRightIcon,\n  } = props;\n\n  const [text, setText] = useState<string>('');\n\n  useEffect(() => {\n    if (value) {\n      setText(value);\n    }\n  }, [value]);\n\n  const onChange = (text: string) => {\n    setText(text);\n    onChangeText(text);\n  };\n\n  const _renderRightIcon = () => {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n      if (text.length > 0) {\n        return (\n          <TouchableOpacity onPress={() => onChange('')}>\n            <Image\n              source={ic_close}\n              style={StyleSheet.flatten([styles.icon, iconStyle])}\n            />\n          </TouchableOpacity>\n        );\n      }\n      return null;\n    }\n    return null;\n  };\n\n  const font = () => {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily,\n      };\n    } else {\n      return {};\n    }\n  };\n\n  return (\n    <TouchableWithoutFeedback>\n      <View style={[style]}>\n        <View style={styles.textInput}>\n          {renderLeftIcon?.()}\n          <TextInput\n            {...props}\n            style={StyleSheet.flatten([styles.input, inputStyle, font()])}\n            value={text}\n            placeholder={placeholder}\n            placeholderTextColor={placeholderTextColor}\n            onChangeText={onChange}\n          />\n          {_renderRightIcon()}\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nTextInputComponent.defaultProps = defaultProps;\n\nexport default TextInputComponent;\n"]},"metadata":{},"sourceType":"module"}